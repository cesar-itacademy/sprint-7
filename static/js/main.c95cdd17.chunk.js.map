{"version":3,"sources":["components/Linea/Linea.styled.js","components/Linea/Linea.jsx","components/boton/Boton.styled.js","components/boton/Boton.js","assets/img/romeo-y-julieta.svg","application/GlobalStyles.js","App.js","index.js"],"names":["StyledLinea","styled","h3","selected","Linea","fraseItem","pink","pinkborder","pinkshadow","StyledBoton","button","Boton","props","onClick","title","GlobalStyle","createGlobalStyle","imagenFondo","StyledBox","section","App","useState","text","setText","indexItem","setIndex","useEffect","a","fetch","response","json","data","getData","obraTeatre","map","frase","index","id","length","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"iPAEaA,EAAcC,IAAOC,GAAV,kJAIF,qBAAEC,SAAyB,SAAW,Q,OCK7CC,EARD,SAAC,GAA2B,IAA1BC,EAAyB,EAAzBA,UAAWF,EAAc,EAAdA,SACvB,OACI,mCACI,cAACH,EAAD,CAAaG,SAAUA,EAAvB,SAAkCE,OCFxCC,EAAM,UAENC,EAAY,UACZC,EAAa,UAENC,EAAcR,IAAOS,OAAV,+6CAPX,UACK,UAsBMH,EApBR,UAmCcA,EAA6BC,EAKvCF,EAGYC,EAA2BC,EAKvCF,EAGYC,EAAmBC,GClDpCG,EAJD,SAACC,GAAD,OACV,cAACH,EAAD,CAAaI,QAASD,EAAMC,QAA5B,SAAuCD,EAAME,SCHlC,MAA0B,4CCG5BC,EAAcC,YAAH,4TAGQC,GAUnBC,EAAYjB,IAAOkB,QAAV,4dC6CPC,EA9CH,WAAO,MAEOC,mBAAS,IAFhB,mBAEVC,EAFU,KAEJC,EAFI,OAGaF,mBAAS,GAHtB,mBAGVG,EAHU,KAGCC,EAHD,KAMjBC,qBAAU,YACK,uCAAG,8BAAAC,EAAA,sEACSC,MAAM,uEADf,cACRC,EADQ,gBAEKA,EAASC,OAFd,OAERC,EAFQ,OAGdR,EAAQQ,GAHM,2CAAH,qDAKbC,KACA,IAIF,IAUMC,EAAaX,EAAKY,KAAI,SAACC,EAAOC,GAClC,IAAIjC,EAEJ,OADqBA,EAArBiC,IAASZ,EACF,cAAC,EAAD,CAAOnB,UAAW8B,EAAkBhC,SAAUA,GAAhBkC,yBAInC,OACA,qCACE,cAACtB,EAAD,IACE,cAAC,EAAD,CAAOD,MAAM,YAAYD,QAfJ,WACvBW,EAAY,GAAGC,EAASD,EAAY,MAelC,cAAC,EAAD,CAAOV,MAAM,cAAcD,QArBV,WACnBW,EAAaF,EAAKgB,OAAS,GAC9Bb,EAASD,EAAY,MAoBhB,cAACN,EAAD,UACKe,QClDfM,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,W","file":"static/js/main.c95cdd17.chunk.js","sourcesContent":["import styled from 'styled-components'\n\nexport const StyledLinea = styled.h3 ` \n  color: white;\n  text-align: center;\n  //Si es la frase seleccionado cambiamos el color\n  background-color: ${({selected}) => selected ? 'tomato' : null  }\n`","import {StyledLinea} from './Linea.styled'\n\n//Frase y si esta seleccionada o no\nconst Linea = ({fraseItem, selected}) => {\n    return (\n        <>\n            <StyledLinea selected={selected}>{fraseItem}</StyledLinea>\n        </>\n    );\n}\n\nexport default Linea","import styled from 'styled-components';\n\nconst text = '#ff6347'\nconst lightpink = '#fff0f0';\nconst pink= '#ffe9e9';\nconst darkpink= '#f9c4d2';\nconst pinkborder= '#b18597';\nconst pinkshadow = '#ffe3e2';\n\nexport const StyledBoton = styled.button`\n    margin-bottom: 3rem;\n    position: relative;\n    display: inline-block;\n    cursor: pointer;\n    outline: none;\n    border: 0;\n    vertical-align: middle;\n    text-decoration: none;\n    font-size: inherit;\n    font-family: inherit;\n    font-weight: 600;\n    color: ${text};\n    text-transform: uppercase;\n    padding: 1.25em 2em;\n    background: ${lightpink};\n    border: 2px solid ${pinkborder};\n    border-radius: 0.75em;\n    transform-style: preserve-3d;\n    transition: transform 150ms cubic-bezier(0, 0, 0.58, 1), background 150ms cubic-bezier(0, 0, 0.58, 1);\n    &::before {\n      position: absolute;\n      content: '';\n      width: 100%;\n      height: 100%;\n      top: 0;\n      left: 0;\n      right: 0;\n      bottom: 0;\n      background: ${darkpink};\n      border-radius: inherit;\n      box-shadow: 0 0 0 2px ${pinkborder}, 0 0.625em 0 0 ${pinkshadow};\n      transform: translate3d(0, 0.75em, -1em);\n      transition: transform 150ms cubic-bezier(0, 0, 0.58, 1), box-shadow 150ms cubic-bezier(0, 0, 0.58, 1);\n    }\n    &:hover {\n      background: ${pink};\n      transform: translate(0, 0.25em);\n      &::before {\n        box-shadow: 0 0 0 2px ${pinkborder}, 0 0.5em 0 0 ${pinkshadow};\n        transform: translate3d(0, 0.5em, -1em);\n      }\n    }\n    &:active {\n      background: ${pink};\n      transform: translate(0em, 0.75em);\n      &::before {\n        box-shadow: 0 0 0 2px ${pinkborder}, 0 0 ${pinkshadow};\n        transform: translate3d(0, 0, -1em);\n    }\n}\n\n`\n","import {StyledBoton} from './Boton.styled'\n\nconst Boton = (props) => (\n    <StyledBoton onClick={props.onClick} >{props.title}</StyledBoton>\n)\n\nexport default Boton;","export default __webpack_public_path__ + \"static/media/romeo-y-julieta.fadc98cb.svg\";","import styled, {createGlobalStyle} from 'styled-components'\nimport imagenFondo from '../assets/img/romeo-y-julieta.svg'\n\nexport const GlobalStyle = createGlobalStyle`\n    body {\n        height: 100vh;\n        background-image: url(${imagenFondo});\n        background-position: center center;\n        background-repeat: no-repeat;\n        display: flex;\n        flex-direction: column;\n        align-items: center;\n        justify-content: flex-start;\n    }\n`\n\nexport const StyledBox = styled.section `\n  width: 20rem;\n  height: auto;\n  background-color: #282c34;\n  opacity: 0.8;\n  //-webkit-box-shadow: 5px 7px 19px 16px rgba(0,0,0,0.84); \n  //box-shadow: 5px 7px 19px 16px rgba(0,0,0,0.84);\n  -webkit-box-shadow: 0px 10px 13px -7px #000000, 5px 5px 6px 26px rgba(0,0,0,0); \n  box-shadow: 0px 10px 13px -7px #000000, 5px 5px 6px 26px rgba(0,0,0,0);\n  overflow: hidden;\n  display:flex;\n  flex-direction: column;\n  justify-content: center;\n`\n","import React, { useState, useEffect } from 'react';\n\n//Crear un id por cada elemento del array\nimport { generate as id  } from \"shortid\";\n\n//Componentes\nimport Linea from './components/Linea/index.js';\nimport Boton from './components/boton';\n\n//StyledComponents \nimport { GlobalStyle, StyledBox } from './application/GlobalStyles';\n\n\n\n//Componente funcional con hooks\nconst App = () =>  {\n   //Inicializamos estado del componente\n  const [text, setText] = useState([]);\n  const [indexItem, setIndex] = useState(0);\n \n  //PeticiÃ³n HTTP para descarga de JSON en servidor online\n  useEffect(() => {\n    const getData = async () => {\n      const response = await fetch(\"http://my-json-server.typicode.com/cesar-itacademy/fake-json/teatre\")\n      const data = await response.json()\n      setText(data)\n    }\n    getData()\n  },[])\n\n\n  //Actualizar estado del componente index para mostrar la frase siguiente o la anterior\n  const handlerIndexNext = () => {\n    if (indexItem < (text.length - 1))\n     setIndex(indexItem + 1)\n  }\n\n  const handlerIndexPrevious = () => {\n    if (indexItem > 0) setIndex(indexItem - 1)\n  }\n\n  //Renderizamos el componente Linea con los textos del JSON\n  const obraTeatre = text.map((frase, index) => {\n    let selected //Pasar como prop el item seleccionado\n    index ===indexItem ? selected= true : selected = false\n    return <Linea fraseItem={frase} key={id()} selected={selected} />\n  }\n  )\n    \n      return (\n      <>\n        <GlobalStyle />\n          <Boton title='<< Enrera' onClick={handlerIndexPrevious} />\n          <Boton title='Endavant >>' onClick={handlerIndexNext}  />\n          <StyledBox>\n              {obraTeatre}\n          </StyledBox>\n      </>\n    );\n  }\n\nexport default App\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n\n"],"sourceRoot":""}